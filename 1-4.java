// データ型
// 今は9つ覚えよう
// 整数↓
// 「long」=　大きな整数(ex.世界の人口等) 範囲は+-約900京
// 「int」= 普通の整数(ex.給与金額等)  範囲は+-約21億                     
// 「short」 = 小さな整数(ex.年齢等)    範囲は+-約3.2万
// 「byte」= さらに小さな整数(ex.所持するメガネ等)　範囲は+-約128
// 小数↓
// 「double」 = 普通の少数(ex.円周率等)
// 「float」 = 少し曖昧でも良い少数(ex.体重)
// 真偽値↓
// 「boolean」 = trueかfalse(ex.既婚か否か)
// 文字↓
// 「char」= １つの文字(ex.イニシャル１文字)
// 文字列↓
// 「String」= 文字の並び(ex.名前等)

// 以下は整数の使用例↓
// long worldPeople; worldPeople = 6900000000L;
// int salary; salary = 152000;
// short age; age = 23;
// byte glasses; glasses = 2;

// まあ、整数を使いたいときは基本的にint使えばオールオッケー！

// 以下は少数の使用例↓
// double height; height = 171.2;
// float weight; weight = 67.5F;

// doubleの方がfloatより多くのメモリを消費しますが、より厳密な計算を行うことができる。
// そのため、特別な事情がない限りdouble型を使用する。

// <<<<<<<<ここから大事になること>>>>>>>>>>
// 実は、浮動小数点方式には「真に厳密な計算ができない」という弱点がある。
// つまり、計算を行った際にわずかな誤差が発生する
// そのため、誤差が決して許されない計算、特に"お金の計算にdoubleやfloatを使ってはいけません！！！"気をつけましょう

// 以下はbooleanの使用例↓
// boolean isMarried; isMarried = true;
// boolean result; result = false;
// 基本的に「YESかNOか」「本当か嘘か」「裏か表か」「成功か失敗か」といった情報を代入するときに使用する。

// 以下は文字、文字列型使用例↓
// char gender; gender = '男';
// String name; name = "すがわら";

// char型を使うときはシングルクウォーテーション(')で囲む。
// String型を使うときはダブルクウォーテーション(")で囲む
// ここを間違えるとコンパイルエラーになる。

